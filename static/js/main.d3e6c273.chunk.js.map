{"version":3,"sources":["App.module.css","Components/Value.js","Components/Button.js","Components/Setting.js","Components/Count.js","Components/Display.js","Redux/Reducer.js","Components/Counter.js","Redux/Store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","maxCount","container","count","buttons","button","text","value","textStart","textMax","inputStart","inputMax","inputStartError","inputMaxError","Value","props","classForInputStartError","startCount","s","classForInputMaxError","react_default","a","createElement","className","type","onChange","handlerChangeStartCount","handlerChangeMaxCount","Button","onClick","onClickFunc","disabled","title","connect","state","disabledForSet","Components_Value","Components_Button","settingEditMode","Count","classForMaxCount","disabledForInc","Components_Count","incrementCount","resCount","displayEditMode","initialState","reducer","arguments","length","undefined","action","_objectSpread","newStartCount","newMaxCount","ConnectedCounter","dispatch","increment","res","resCountAC","newCount","startCountAC","newChangeMaxCount","maxCountAC","_useState","useState","_useState2","Object","slicedToArray","editMode","setEditMode","Components_Setting","e","newValue","Number","currentTarget","Components_Display","store","createStore","es","Components_Counter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2EACAA,EAAAC,QAAA,CAAkBC,IAAA,iBAAAC,SAAA,sBAAAC,UAAA,uBAAAC,MAAA,mBAAAC,QAAA,qBAAAC,OAAA,oBAAAC,KAAA,kBAAAC,MAAA,mBAAAC,UAAA,uBAAAC,QAAA,qBAAAC,WAAA,wBAAAC,SAAA,sBAAAC,gBAAA,6BAAAC,cAAA,iMCyBHC,EAvBM,SAACC,GAClB,IAAIC,EAA0BD,EAAME,YAAcF,EAAMd,UACrDc,EAAME,WAAa,EAAIC,IAAEN,gBAAkBM,IAAER,WAC5CS,EAAwBJ,EAAME,YAAcF,EAAMd,UACnDc,EAAME,WAAa,EAAIC,IAAEL,cAAgBK,IAAEP,SAC9C,OACIS,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,IAAEX,OACda,EAAAC,EAAAC,cAAA,QAAMC,UAAWL,IAAEV,WAAnB,gBACAY,EAAAC,EAAAC,cAAA,SACIC,UAAWP,EACXQ,KAAK,SACLjB,MAAOQ,EAAME,WACbQ,SAAUV,EAAMW,0BACpBN,EAAAC,EAAAC,cAAA,QAAMC,UAAWL,IAAET,SAAnB,cACAW,EAAAC,EAAAC,cAAA,SACIC,UAAWJ,EACXK,KAAK,SACLjB,MAAOQ,EAAMd,SACbwB,SAAUV,EAAMY,0BCNjBC,EAZO,SAACb,GACnB,OACIK,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,UAAWL,IAAEb,OACbwB,QAASd,EAAMe,YACfC,SAAUhB,EAAMgB,UACnBhB,EAAMiB,gBCyBRC,cAPS,SAACC,GACrB,MAAO,CACHjB,WAAYiB,EAAMjB,WAClBhB,SAAUiC,EAAMjC,WAITgC,CA3BQ,SAAClB,GACpB,IAAIoB,EAAiBpB,EAAME,YAAcF,EAAMd,UAAYc,EAAME,WAAa,EAAI,WAAa,GAC/F,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,IAAEhB,WACdkB,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,IAAEf,OACdiB,EAAAC,EAAAC,cAACc,EAAD,CAAOnB,WAAYF,EAAME,WAClBhB,SAAUc,EAAMd,SAChByB,wBAAyBX,EAAMW,wBAC/BC,sBAAuBZ,EAAMY,yBAExCP,EAAAC,EAAAC,cAAA,OAAMC,UAAWL,IAAEd,SACfgB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACe,EAAD,CAAQP,YAAaf,EAAMuB,gBACnBP,SAAUI,EACVH,MAAO,aCPpBO,EAXM,SAACxB,GAElB,IAAIyB,EAAmBzB,EAAMZ,QAAUY,EAAMd,SAAWiB,IAAEjB,SAAW,GAErE,OACImB,EAAAC,EAAAC,cAAA,OAAKC,UAAWiB,GACXzB,EAAMZ,QCiCJ8B,cARS,SAACC,GACrB,MAAO,CACH/B,MAAO+B,EAAM/B,MACbc,WAAYiB,EAAMjB,WAClBhB,SAAUiC,EAAMjC,WAITgC,CApCQ,SAAClB,GACpB,IAAI0B,EAAiB1B,EAAMZ,QAAUY,EAAMd,SAAW,WACnDc,EAAME,WAAa,EAAI,WAAa,GACvC,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,IAAEhB,WACdkB,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,IAAEf,OACdiB,EAAAC,EAAAC,cAACoB,EAAD,CAAOvC,MAAOY,EAAMZ,MACbF,SAAUc,EAAMd,YAE3BmB,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,IAAEd,SACdgB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACe,EAAD,CAAQP,YAAaf,EAAM4B,eACnBZ,SAAUU,EACVT,MAAO,SAEnBZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACe,EAAD,CAAQP,YAAaf,EAAM6B,SACnBZ,MAAO,WAEnBZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACe,EAAD,CAAQP,YAAaf,EAAM8B,gBACnBb,MAAO,wkBC3BnC,IAMMc,EAAe,CACjB3C,MAAO,EACPF,SAAU,EACVgB,WAAY,GA2CD8B,EAzCC,WAAkC,IAAjCb,EAAiCc,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBF,EAAcK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9C,OAAQC,EAAO3B,MACX,IAbU,oBAcN,OAAA4B,EAAA,GACOlB,EADP,CACc/B,MAAO+B,EAAM/B,MAAQ,IAEvC,IAhBU,oBAiBI,OAAAiD,EAAA,GACHlB,EADG,CACI/B,MAAOgD,EAAOE,gBAGhC,IApBY,sBAqBR,IAAI9C,EAAQ4C,EAAOE,cACnB,OAAAD,EAAA,GACOlB,EADP,CACcjB,WAAYV,EAAOJ,MAAOI,IAE5C,IAxBU,oBAyBN,OAAA6C,EAAA,GACOlB,EADP,CACcjC,SAAUkD,EAAOG,cAGvC,OAAOpB,GCgDIqB,EAFUtB,YA3BD,SAACC,GACrB,MAAO,CACHA,UAImB,SAACsB,GACxB,MAAO,CACHC,UADG,WAGCD,EDzBD,CAAChC,KApCM,uBC+DVkC,IALG,SAKCL,GACA,IAAMF,EDzBQ,SAACE,GAEvB,MAAO,CAAC7B,KAxCM,oBAwCW6B,iBCuBFM,CAAWN,GAC1BG,EAASL,IAEbS,SATG,SASMP,GACL,IAAMF,EDxBU,SAACE,GACzB,MAAO,CAAC7B,KA3CQ,sBA2CW6B,iBCuBJQ,CAAaR,GAC5BG,EAASL,IAEbW,kBAbG,SAaeR,GACd,IAAMH,EDxBQ,SAACG,GACvB,MAAO,CAAC9B,KA9CM,oBA8CW8B,eCuBFS,CAAWT,GAC1BE,EAASL,MAKIlB,CAtEF,SAAClB,GAAU,IAAAiD,EAEEC,oBAAS,GAFXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEvBK,EAFuBH,EAAA,GAEbI,EAFaJ,EAAA,GA6B9B,OACI9C,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,IAAElB,MACZqE,GACFjD,EAAAC,EAAAC,cAACiD,EAAD,CAAS7C,wBAZe,SAAC8C,GAC7B,IAAIC,EAAWC,OAAOF,EAAEG,cAAcpE,OACtCQ,EAAM6C,SAASa,IAWF9C,sBARa,SAAC6C,GAC3BzD,EAAM+C,kBAAkBY,OAAOF,EAAEG,cAAcpE,SAQlC+B,gBA1BO,WACpBgC,GAAY,MA0BPD,GACDjD,EAAAC,EAAAC,cAACsD,EAAD,CAASjC,eAxBM,WACnB5B,EAAM0C,aAwBOb,SArBA,WACb7B,EAAM2C,IAAI3C,EAAMmB,MAAMjB,aAqBT4B,gBAlCO,WACpByB,GAAY,gBCPLO,EAFDC,YAAY/B,GCUX/C,EARI,WACf,OACIoB,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAUF,MAAOA,GACbzD,EAAAC,EAAAC,cAAC0D,EAAD,QCGQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d3e6c273.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__Rxftt\",\"maxCount\":\"App_maxCount__1rKlq\",\"container\":\"App_container__1IbnI\",\"count\":\"App_count__3QQbO\",\"buttons\":\"App_buttons__3WIh5\",\"button\":\"App_button__2JsmE\",\"text\":\"App_text__2kA5_\",\"value\":\"App_value__2nWiu\",\"textStart\":\"App_textStart__2Pjv2\",\"textMax\":\"App_textMax__1OqHZ\",\"inputStart\":\"App_inputStart__vkbxB\",\"inputMax\":\"App_inputMax__1MZCD\",\"inputStartError\":\"App_inputStartError__25Z40\",\"inputMaxError\":\"App_inputMaxError__7Pi7X\"};","import React from 'react';\r\nimport s from '../App.module.css';\r\n\r\nexport const Value = (props) => {\r\n    let classForInputStartError = props.startCount >= props.maxCount\r\n    || props.startCount < 0 ? s.inputStartError : s.inputStart;\r\n    let classForInputMaxError = props.startCount >= props.maxCount\r\n    || props.startCount < 0 ? s.inputMaxError : s.inputMax;\r\n    return (\r\n        <div className={s.value}>\r\n            <span className={s.textStart}>start value:</span>\r\n            <input\r\n                className={classForInputStartError}\r\n                type=\"number\"\r\n                value={props.startCount}\r\n                onChange={props.handlerChangeStartCount}/>\r\n            <span className={s.textMax}>max value:</span>\r\n            <input\r\n                className={classForInputMaxError}\r\n                type=\"number\"\r\n                value={props.maxCount}\r\n                onChange={props.handlerChangeMaxCount}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Value;\r\n\r\n\r\n","import React from 'react';\r\nimport s from '../App.module.css';\r\n\r\nexport const Button = (props) => {\r\n    return (\r\n        <div>\r\n            <button className={s.button}\r\n                    onClick={props.onClickFunc}\r\n                    disabled={props.disabled}>\r\n                {props.title}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n\r\n\r\n","import React from 'react';\r\nimport s from '../App.module.css';\r\nimport Value from \"./Value\";\r\nimport Button from \"./Button\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nexport const Setting = (props) => {\r\n    let disabledForSet = props.startCount >= props.maxCount || props.startCount < 0 ? 'disabled' : \"\";\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.count}>\r\n                <Value startCount={props.startCount}\r\n                       maxCount={props.maxCount}\r\n                       handlerChangeStartCount={props.handlerChangeStartCount}\r\n                       handlerChangeMaxCount={props.handlerChangeMaxCount}/>\r\n            </div>\r\n            < div className={s.buttons}>\r\n                <div>\r\n                    <Button onClickFunc={props.settingEditMode}\r\n                            disabled={disabledForSet}\r\n                            title={'Set'}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        startCount: state.startCount,\r\n        maxCount: state.maxCount\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Setting);\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from \"../App.module.css\";\r\n\r\nexport const Count = (props) => {\r\n\r\n    let classForMaxCount = props.count === props.maxCount ? s.maxCount : \"\";\r\n\r\n    return (\r\n        <div className={classForMaxCount}>\r\n            {props.count}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Count;\r\n\r\n","import React from 'react';\r\nimport s from '../App.module.css';\r\nimport Count from \"./Count\";\r\nimport Button from \"./Button\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport const Display = (props) => {\r\n    let disabledForInc = props.count === props.maxCount ? 'disabled' : \"\"\r\n    || props.startCount < 0 ? 'disabled' : \"\";\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.count}>\r\n                <Count count={props.count}\r\n                       maxCount={props.maxCount}/>\r\n            </div>\r\n            <div className={s.buttons}>\r\n                <div>\r\n                    <Button onClickFunc={props.incrementCount}\r\n                            disabled={disabledForInc}\r\n                            title={'Inc'}/>\r\n                </div>\r\n                <div>\r\n                    <Button onClickFunc={props.resCount}\r\n                            title={'Reset'}/>\r\n                </div>\r\n                <div>\r\n                    <Button onClickFunc={props.displayEditMode}\r\n                            title={'Set'}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        count: state.count,\r\n        startCount: state.startCount,\r\n        maxCount: state.maxCount\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Display);\r\n\r\n\r\n","const INC_COUNT = \"reducer/INC_COUNT\";\r\nconst RES_COUNT = \"reducer/RES_COUNT\";\r\nconst START_COUNT = \"reducer/START_COUNT\";\r\nconst MAX_COUNT = \"reducer/MAX_COUNT\";\r\n\r\n\r\nconst initialState = {\r\n    count: 0,\r\n    maxCount: 0,\r\n    startCount: 0,\r\n};\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INC_COUNT:\r\n            return {\r\n                ...state, count: state.count + 1\r\n            };\r\n        case RES_COUNT:\r\n                      return {\r\n                ...state, count: action.newStartCount\r\n            };\r\n\r\n        case START_COUNT:\r\n            let value = action.newStartCount;\r\n            return {\r\n                ...state, startCount: value, count: value\r\n            };\r\n        case MAX_COUNT:\r\n            return {\r\n                ...state, maxCount: action.newMaxCount\r\n            };\r\n    }\r\n    return state\r\n};\r\n\r\nexport const incrementCountAC = () => {\r\n    return {type: INC_COUNT}\r\n};\r\n\r\nexport const resCountAC = (newStartCount) => {\r\n\r\n    return {type: RES_COUNT, newStartCount}\r\n};\r\n\r\nexport const startCountAC = (newStartCount) => {\r\n    return {type: START_COUNT, newStartCount}\r\n};\r\n\r\nexport const maxCountAC = (newMaxCount) => {\r\n    return {type: MAX_COUNT, newMaxCount}\r\n};\r\n\r\nexport default reducer","import React, {useState} from 'react';\r\nimport s from '../App.module.css';\r\nimport Setting from \"../Components/Setting\";\r\nimport Display from \"../Components/Display\";\r\nimport {connect} from \"react-redux\";\r\nimport {incrementCountAC, maxCountAC, resCountAC, startCountAC} from \"../Redux/Reducer\";\r\n\r\n\r\nexport const Counter = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const displayEditMode = () => {\r\n        setEditMode(false)\r\n    };\r\n\r\n    const settingEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const incrementCount = () => {\r\n        props.increment();\r\n    };\r\n\r\n    const resCount = () => {\r\n        props.res(props.state.startCount);\r\n    };\r\n\r\n    const handlerChangeStartCount = (e) => {\r\n        let newValue = Number(e.currentTarget.value);\r\n        props.newCount(newValue)\r\n    };\r\n\r\n    const handlerChangeMaxCount = (e) => {\r\n        props.newChangeMaxCount(Number(e.currentTarget.value));\r\n    };\r\n\r\n    return (\r\n        <div className={s.App}>\r\n            {!editMode &&\r\n            <Setting handlerChangeStartCount={handlerChangeStartCount}\r\n                     handlerChangeMaxCount={handlerChangeMaxCount}\r\n                     settingEditMode={settingEditMode}/>}\r\n            {editMode &&\r\n            <Display incrementCount={incrementCount}\r\n                     resCount={resCount}\r\n                     displayEditMode={displayEditMode}/>}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        state\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        increment() {\r\n            const action = incrementCountAC();\r\n            dispatch(action)\r\n        },\r\n        res(newStartCount) {\r\n            const action = resCountAC(newStartCount);\r\n            dispatch(action)\r\n        },\r\n        newCount(newStartCount) {\r\n            const action = startCountAC(newStartCount);\r\n            dispatch(action)\r\n        },\r\n        newChangeMaxCount(newMaxCount) {\r\n            const action = maxCountAC(newMaxCount);\r\n            dispatch(action)\r\n        }\r\n    }\r\n};\r\n\r\nconst ConnectedCounter = connect(mapStateToProps, mapDispatchToProps)(Counter);\r\n\r\nexport default ConnectedCounter;\r\n\r\n\r\n\r\n\r\n","import {createStore} from \"redux\";\r\nimport reducer from \"./Reducer\";\r\n\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store","import React from 'react';\r\nimport Counter from \"./Components/Counter\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./Redux/Store\";\r\n\r\n\r\nexport const App = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            <Counter/>\r\n        </Provider>\r\n    )\r\n};\r\n\r\nexport default App\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}